{"version":3,"sources":["containers/NewTest/NewTest.js","containers/MyTest/MyTest.js","containers/TestDetails/TestDetails.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["NewTest","type","alt","Component","MyTest","id","TestDetails","layout","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAoDeA,G,uLA9CP,OACI,6BACI,8CACA,qDACA,2BAAOC,KAAK,SACZ,+CACA,2BAAOA,KAAK,aACZ,mDACA,2BAAOA,KAAK,SACZ,0CACA,6BAEA,6BACI,2CACA,2BAAOA,KAAK,UAEhB,6BACI,wCACA,2BAAOA,KAAK,OAAOC,IAAI,mBAE3B,6BACI,2CACA,2BAAOD,KAAK,OAGhB,6BACI,2CACA,2BAAOA,KAAK,QAEhB,6BACI,2CACA,2BAAOA,KAAK,SAEhB,6BACI,2CACA,2BAAOA,KAAK,QAEhB,wCACA,6C,GAxCME,cC8BPC,G,uLA7BP,OACI,yBAAKC,GAAG,UACJ,+BACA,wCACA,yBAAKA,GAAI,aACL,yCACA,yCACA,6CAEJ,yBAAKA,GAAI,aACL,0CACA,yCACA,6CAEJ,yBAAKA,GAAI,aACL,sCACA,yCACA,6CAEJ,yBAAKA,GAAI,aACL,uCACA,yCACA,kD,GAxBCF,cCgBNG,E,iLAfP,OACI,6BACI,4CACA,6BACI,yCACA,8CACA,uEACA,kEACA,yD,GAVMH,aCkBXI,G,MAdA,kBACX,6BACI,yBAAKF,GAAG,UACJ,+CACA,uCACA,wBAAIA,GAAG,SAAP,cAGJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJOG,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b1a0e98.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './NewTest.css'\n\n\nclass NewTest extends Component {\n    render() {\n        return (\n            <div>\n                <h1>New Test Setup</h1>\n                <label>Name of the Test :</label>\n                <input type=\"text\"></input>\n                <label>Instructions</label>\n                <input type=\"textarea\"></input>\n                <label>No. of Questions</label>\n                <input type=\"text\"></input>\n                <button >Submit</button>\n                <hr/>\n\n                <div>\n                    <label>Question</label>\n                    <input type=\"text\"></input>\n                </div>\n                <div>\n                    <label>Image</label>\n                    <input type=\"file\" alt=\"img.imagename\"></input>\n                </div>\n                <div>\n                    <label>Option 1</label>\n                    <input type=\"I\"></input>\n                </div>\n\n                <div>\n                    <label>Option 2</label>\n                    <input type=\"II\"></input>\n                </div>\n                <div>\n                    <label>Option 3</label>\n                    <input type=\"III\"></input>\n                </div>\n                <div>\n                    <label>Option 4</label>\n                    <input type=\"IV\"></input>\n                </div>\n                <button>Back</button>\n                <button>Next</button>\n\n\n            </div>\n        );\n    }\n}\n\nexport default NewTest;","import React, { Component } from 'react';\nimport './MyTest.css'\n\nclass MyTest extends Component {\n    render() {\n        return (\n            <div id=\"MyTest\">\n                <span></span>\n                <h1>My Tests</h1>\n                <div id =\"MyTestBox\">\n                    <h4>Physics I</h4>\n                    <h6>Completed</h6>\n                    <button> Details</button>\n                </div>\n                <div id =\"MyTestBox\">\n                    <h4>Physics II</h4>\n                    <h6>Completed</h6>\n                    <button> Details</button>\n                </div>\n                <div id =\"MyTestBox\">\n                    <h4>Chem I</h4>\n                    <h6>Completed</h6>\n                    <button> Details</button>\n                </div>\n                <div id =\"MyTestBox\">\n                    <h4>Chem II</h4>\n                    <h6>Completed</h6>\n                    <button> Details</button>\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default MyTest;","import React, { Component } from 'react';\n\nclass TestDetails extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Test Details</h1>\n                <div>\n                    <h4>Test Name</h4>\n                    <p>No of questions</p>\n                    <p>Students Appeared : testid.studentnumber</p>\n                    <p>Highest Marks : testid.highestmarks</p>\n                    <button> View Questions</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TestDetails;","import React from 'react';\nimport NewTest from '../../containers/NewTest/NewTest';\nimport MyTest from '../../containers/MyTest/MyTest'\nimport TestDetails from '../../containers/TestDetails/TestDetails';\nimport './Layout.css'\n\nconst layout = () => (\n    <div>\n        <div id=\"Navbar\">\n            <li>create new test</li>\n            <li>my test</li>\n            <li id=\"right\">my accout</li>\n        </div>\n        \n        <NewTest></NewTest>\n        <MyTest></MyTest>\n        <TestDetails></TestDetails>\n    </div>\n);\n\nexport default layout;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout></Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}